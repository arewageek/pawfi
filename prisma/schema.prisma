// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum TradeType {
  BUY
  SELL
}

// user schema
model User {
  id String @id @default(uuid()) @map("id")

  // user biodata
  chatId  String @unique
  balance Float @default(0)

  // relationships
  stats     Stat[]
  tokens    Token[]
  positions Position[]
  trades    Trade[]

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// stats schema
model Stat {
  id     String @id @default(uuid()) @map("id")
  volume Float
  count  Int

  // relationship
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // not important now but no harm in including a timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Token schema
model Token {
  id       String @id @default(uuid())
  name     String
  symbol   String
  ca       String @unique

  user     User   @relation(fields: [userId], references: [id])
  userId   String

  positions Position[]
  trades    Trade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Position schema (for active token holdings)
model Position {
  id       String @id @default(uuid())

  user     User   @relation(fields: [userId], references: [id])
  token    Token  @relation(fields: [tokenId], references: [id])
  
  trades Trade[]

  balance  Float
  isOpen   Boolean @default(true)

  userId   String
  tokenId  String
  tradeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// Trade schema (linked to Position)
model Trade {
  id         String    @id @default(uuid())
  type       TradeType
  marketCap  Float
  usdValue   Float
  quantity   Float

  position   Position  @relation(fields: [positionId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  token      Token     @relation(fields: [tokenId], references: [id])

  positionId String
  userId     String
  tokenId    String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}